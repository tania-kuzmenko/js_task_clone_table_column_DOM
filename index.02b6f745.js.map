{"mappings":"ACEA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAgBrC,AAdA,WACE,IAAM,EAAO,EAAM,IAAI,CAElB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,EAAI,KAAK,CAEvB,GAAI,EAAM,MAAM,CAAG,EAAG,CACpB,IAAM,EAAa,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAEtC,EAAI,YAAY,CAAC,EAAY,CAAK,CAAC,EAAM,MAAM,CAAG,EAAE,CACtD,CACF,C,C,M,E,CARK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CASP","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nfunction cloneSecondColumn() {\n    var rows = table.rows;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var cells = row.cells;\n            if (cells.length > 1) {\n                var clonedCell = cells[1].cloneNode(true);\n                row.insertBefore(clonedCell, cells[cells.length - 1]);\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\ncloneSecondColumn();\n\n//# sourceMappingURL=index.02b6f745.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nfunction cloneSecondColumn() {\n  const rows = table.rows;\n\n  for (const row of rows) {\n    const cells = row.cells;\n\n    if (cells.length > 1) {\n      const clonedCell = cells[1].cloneNode(true);\n\n      row.insertBefore(clonedCell, cells[cells.length - 1]);\n    }\n  }\n}\n\ncloneSecondColumn();\n"],"names":["table","document","querySelector","cloneSecondColumn","rows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","cells","length","clonedCell","cloneNode","insertBefore","err","return"],"version":3,"file":"index.02b6f745.js.map"}